#!/usr/bin/env python

import argparse
import fnmatch
import sys
import re

import yaml


parser = argparse.ArgumentParser()
parser.add_argument('-x', '--no-absent', action='store_true',
    help='Include fields which we may have filtered for, but are known to not exist')
parser.add_argument('-f', '--file', action='append',
    help='File of patterns; one per line')
parser.add_argument('patterns', nargs='*')
parser.add_argument('schema', default='-')
args = parser.parse_args()


raw_patterns = list(args.patterns)
for path in args.file:
    raw_patterns.extend(open(path))

patterns = []
for raw in raw_patterns:

    raw = raw.split('#')[0].strip()
    if not raw:
        continue

    m = re.match(r'([+-])?\s*([^\.:]+)(?:\.(.+?))?(?::(.+))?$', raw)
    if not m:
        print >> sys.stderr, 'could not parse filter:', raw
        continue

    flag, entity_type, field_name, data_type = m.groups()
    if data_type and not field_name:
        field_name = '*'
    
    include = flag in (None, '+')
    patterns.append((entity_type, field_name, data_type, include))


def apply_patterns(entity_type, name=None, data_type=None, default=True):

    for entity_pattern, name_pattern, type_pattern, include in patterns:

        if not fnmatch.fnmatch(entity_type, entity_pattern):
            continue

        if name is None: # name is actually a entity type
            if name_pattern or type_pattern: # it is a field pattern
                continue
            return include

        else: # name is a field name

            # only apply to the given types
            if data_type and type_pattern and type_pattern != data_type:
                continue

            if not name_pattern: # we need a name and pattern
                continue

            if fnmatch.fnmatch(name, name_pattern):
                return include

    return default


old_schema = yaml.load((sys.stdin if args.schema == '-' else open(args.schema)).read())


new_schema = {}
for entity_type, entity_spec in old_schema.iteritems():

    if not apply_patterns(entity_type):
        continue

    new_entity = {}
    for field_name, field_spec in entity_spec.iteritems():
        data_type = field_spec if isinstance(field_spec, basestring) else field_spec['data_type']
        if apply_patterns(entity_type, field_name, data_type):
            new_entity[field_name] = field_spec

    if new_entity:
        new_schema[entity_type] = new_entity


if not args.no_absent:
    for entity_pattern, name_pattern, type_pattern, include in patterns:
        
        # Only things to include (although it wouldn't really hurt to not).
        if not include:
            continue

        # Only specific names.
        if not name_pattern or re.search(r'[\[\]*?]', name_pattern):
            continue

        for entity_type, entity_spec in new_schema.iteritems():
            if not fnmatch.fnmatch(entity_type, entity_pattern):
                continue
            entity_spec.setdefault(name_pattern, 'absent')


print yaml.dump(new_schema, indent=4)
