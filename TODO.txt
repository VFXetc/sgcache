

- dump-schema.py which creates a schema.json
- dump-data.py which takes a schema.json, and a $TYPE.json (which is an
  entity per line, json encoded)
    - sphinx docs for everything that we learn as we test it
    âˆš ask Shotgun how much it costs to host our own

- daemons:
    - master server which holds the last_event_id lock
    - tiny web app
    - one sgevent server (which could be another project)
    - multiple API servers (because Python threads suck)

- how to build monstrous Neo4j queries to represent the common logic we want
  - define all relationships in the MATCH:
      MATCH (p:Project {id: 66}),(t:Task),t-[e:project]->p RETURN p, e, t LIMIT 1
      MATCH (e:Task), (e_project:Project {id: 66}), e-[:project]->e_project RETURN e, e_project LIMIT 1

      MATCH (e:Task), (e_project:Project {id: 66}), e-[:project]->e_project
          OPTIONAL MATCH (e_entity)<-[:entity]-(e)
          OPTIONAL MATCH (e_step)<-[:step]-(e)
          RETURN e, e_entity, e_step

      MATCH
          (t:Task),
          (h:Shot),
          (q:Sequence),
          (p:Project {id: 66}),
          (u:HumanUser {name: "Mike Boers"}),
          t-[:task_assignees]->u,
          t-[:project]->p,
          t-[:entity]->h,
          h-[:sg_sequence]->q
        RETURN t, p, u, h, q
        LIMIT 10

      MATCH (task:Task), (shot:Shot), task-[:entity]->shot
      RETURN task, shot as task_entity
      UNION ALL
      MATCH (task:Task), (asset:Asset), task-[:entity]->asset
      RETURN task, asset as task_entity
      LIMIT 10

- what must be do for `s3_uploads_enabled` in server info?

- store links as `!!entity Type id` so that we know that they exists

- how to pull apart the results of those queries

- YAML-style encoding of non-native types, e.g. a datetime: !!timestamp "2015-06-22 15:46:09.625815"

- URLS could include the real shotgun server:
    >>> sg = Shotgun('http://localhost:8000/next=keystone.shotgunstudio.com/', 'xxx', 'yyy')
    The trailing slash is required for it to not get parsed out.

- Can we instead exist as the http_proxy kwarg?

- framework for forwarding the query to the real Shotgun if we don't know
  how to deal with it

- listen for schema changes, and use that to invalidate data
