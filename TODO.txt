
- exception to signal that a required entity doesn't exist: EntityMissing
- exception to signal that a required field doesn't exist: FieldMissing
- exception to signal that we can't process the requested filter: FilterNotImplemented
- exception to signal non-error that requeted data doesn't exist: NoFieldData


- dump-schema.py which creates a schema.json
- dump-data.py which takes a schema.json, and a $TYPE.json (which is an
  entity per line, json encoded)
    - sphinx docs for everything that we learn as we test it
    âˆš ask Shotgun how much it costs to host our own

- daemons:
    - master server which holds the last_event_id lock
    - tiny web app
    - one sgevent server (which could be another project)
    - multiple API servers (because Python threads suck)

- what must be do for `s3_uploads_enabled` in server info?

- how to pull apart the results of those queries

- YAML-style encoding of non-native types, e.g. a datetime: !!timestamp "2015-06-22 15:46:09.625815"

- URLS could include the real shotgun server:
    >>> sg = Shotgun('http://localhost:8000/next=keystone.shotgunstudio.com/', 'xxx', 'yyy')
    The trailing slash is required for it to not get parsed out.

- Can we instead exist as the http_proxy kwarg?

- framework for forwarding the query to the real Shotgun if we don't know
  how to deal with it

- listen for schema changes, and use that to invalidate data
